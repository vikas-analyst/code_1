<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        .highlight-a {
            background-color: red;
        }
        .highlight-b {
            background-color: green;
        }
        .highlight-c {
            background-color: blue;
        }
        .btn {
            margin: 5px;
        }
    </style>
</head>
<body>
<h1>Task Manager</h1>
<button class="btn" onclick="addTaskRow()">Add Task</button>
<button class="btn" onclick="saveTasks()">Save Tasks</button>
<button class="btn" onclick="moveTaskUp()">Move Up</button>
<button class="btn" onclick="moveTaskDown()">Move Down</button>
<button class="btn" onclick="deleteTask()">Delete</button>
<button class="btn" onclick="importTasks()">Import Tasks</button>
<button class="btn" onclick="exportTasks()">Export Tasks</button>
<table id="taskTable">
    <thead>
    <tr>
        <th>Tick</th>
        <th>Edit</th>
        <th>Task Name</th>
        <th>Category</th>
        <th>Days</th>
        <th>End Date</th>
        <!-- Date columns will be added dynamically -->
    </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    let tasks = [];
    let selectedTasks = new Set();
    const dateRange = generateDateRange(56); // 8 weeks = 56 days

    function generateDateRange(days) {
        const dates = [];
        const today = new Date();
        for (let i = 0; i < days; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            dates.push(date.toISOString().split('T')[0]);
        }
        return dates;
    }

    function addTaskRow() {
        const table = document.getElementById('taskTable').getElementsByTagName('tbody')[0];
        const row = table.insertRow();
        const selectCell = row.insertCell(0);
        const editCell = row.insertCell(1);
        const taskNameCell = row.insertCell(2);
        const categoryCell = row.insertCell(3);
        const daysCell = row.insertCell(4);
        const endDateCell = row.insertCell(5);

        selectCell.innerHTML = '<input type="checkbox" onclick="toggleTaskSelection(this)">';
        editCell.innerHTML = '<button onclick="saveNewTask(this)">Save</button>';
        taskNameCell.innerHTML = '<input type="text">';
        categoryCell.innerHTML = '<select><option value="a">a</option><option value="b">b</option><option value="c">c</option></select>';
        daysCell.innerHTML = '<input type="number">';
        endDateCell.innerHTML = '<input type="date">';

        dateRange.forEach(date => {
            const dateCell = row.insertCell();
            dateCell.textContent = date;
        });
    }

    function saveNewTask(button) {
        const row = button.parentElement.parentElement;
        const taskName = row.cells[2].getElementsByTagName('input')[0].value;
        const category = row.cells[3].getElementsByTagName('select')[0].value;
        const days = row.cells[4].getElementsByTagName('input')[0].value;
        const endDate = row.cells[5].getElementsByTagName('input')[0].value;

        tasks.push({ taskName, category, days, endDate });
        updateTable();
    }

    function toggleTaskSelection(checkbox) {
        const row = checkbox.parentElement.parentElement;
        const index = row.rowIndex - 1;
        if (checkbox.checked) {
            selectedTasks.add(index);
        } else {
            selectedTasks.delete(index);
        }
    }

    function editTask(button) {
        const row = button.parentElement.parentElement;
        const index = row.rowIndex - 1;
        const task = tasks[index];
        row.cells[2].innerHTML = `<input type="text" value="${task.taskName}">`;
        row.cells[3].innerHTML = `<select><option value="a" ${task.category === 'a' ? 'selected' : ''}>a</option><option value="b" ${task.category === 'b' ? 'selected' : ''}>b</option><option value="c" ${task.category === 'c' ? 'selected' : ''}>c</option></select>`;
        row.cells[4].innerHTML = `<input type="number" value="${task.days}">`;
        row.cells[5].innerHTML = `<input type="date" value="${task.endDate}">`;
        button.textContent = 'Save';
        button.onclick = () => saveEditedTask(row, index);
    }

    function saveEditedTask(row, index) {
        const taskName = row.cells[2].getElementsByTagName('input')[0].value;
        const category = row.cells[3].getElementsByTagName('select')[0].value;
        const days = row.cells[4].getElementsByTagName('input')[0].value;
        const endDate = row.cells[5].getElementsByTagName('input')[0].value;

        tasks[index] = { taskName, category, days, endDate };
        updateTable();
    }

    function updateTable() {
        const table = document.getElementById('taskTable').getElementsByTagName('tbody')[0];
        table.innerHTML = '';
        tasks.forEach((task, index) => {
            const row = table.insertRow();
            const selectCell = row.insertCell(0);
            const editCell = row.insertCell(1);
            const taskNameCell = row.insertCell(2);
            const categoryCell = row.insertCell(3);
            const daysCell = row.insertCell(4);
            const endDateCell = row.insertCell(5);

            selectCell.innerHTML = `<input type="checkbox" onclick="toggleTaskSelection(this)" ${selectedTasks.has(index) ? 'checked' : ''}>`;
            editCell.innerHTML = '<button onclick="editTask(this)">Edit</button>';
            taskNameCell.textContent = task.taskName;
            categoryCell.textContent = task.category;
            daysCell.textContent = task.days;
            endDateCell.textContent = task.endDate;

            const endDate = new Date(task.endDate);
            const startDate = new Date(endDate);
            startDate.setDate(endDate.getDate() - task.days + 1);

            dateRange.forEach(date => {
                const dateCell = row.insertCell();
                const currentDate = new Date(date);
                if (currentDate >= startDate && currentDate <= endDate) {
                    if (task.category === 'a') {
                        dateCell.classList.add('highlight-a');
                    } else if (task.category === 'b') {
                        dateCell.classList.add('highlight-b');
                    } else if (task.category === 'c') {
                        dateCell.classList.add('highlight-c');
                    }
                }
                dateCell.textContent = date;
            });
        });
    }

    function saveTasks() {
        const csvContent = tasks.map(task => `${task.taskName},${task.category},${task.days},${task.endDate}`).join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'tasks.csv';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    function loadTasks() {
        const savedTasks = localStorage.getItem('tasks');
        if (savedTasks) {
            tasks = JSON.parse(savedTasks);
            updateTable();
        }
    }

    window.onload = () => {
        importTasks();
        const headerRow = document.getElementById('taskTable').getElementsByTagName('thead')[0].rows[0];
        dateRange.forEach(date => {
            const th = document.createElement('th');
            th.textContent = date;
            headerRow.appendChild(th);
        });
    };

    function deleteTask() {
        tasks = tasks.filter((_, index) => !selectedTasks.has(index));
        selectedTasks.clear();
        updateTable();
    }

    function moveTaskUp() {
        const selectedIndexes = Array.from(selectedTasks).sort();
        selectedIndexes.forEach(index => {
            if (index > 0) {
                [tasks[index], tasks[index - 1]] = [tasks[index - 1], tasks[index]];
                selectedTasks.delete(index);
                selectedTasks.add(index - 1);
            }
        });
        updateTable();
    }

    function moveTaskDown() {
        const selectedIndexes = Array.from(selectedTasks).sort().reverse();
        selectedIndexes.forEach(index => {
            if (index < tasks.length - 1) {
                [tasks[index], tasks[index + 1]] = [tasks[index + 1], tasks[index]];
                selectedTasks.delete(index);
                selectedTasks.add(index + 1);
            }
        });
        updateTable();
    }

    function importTasks() {
        fetch('tasks.csv')
            .then(response => response.text())
            .then(csv => {
                const rows = csv.split('\n');
                tasks = rows.map(row => {
                    const [taskName, category, days, endDate] = row.split(',');
                    return { taskName, category, days: parseInt(days), endDate };
                });
                updateTable();
            })
            .catch(error => console.error('Error loading tasks:', error));
    }

    function exportTasks() {
        // Implement export functionality here
    }

    window.onload = () => {
        loadTasks();
        const headerRow = document.getElementById('taskTable').getElementsByTagName('thead')[0].rows[0];
        dateRange.forEach(date => {
            const th = document.createElement('th');
            th.textContent = date;
            headerRow.appendChild(th);
        });
    };
</script>
</body>
</html>
